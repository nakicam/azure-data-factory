{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Arbeitsbereichsname",
			"defaultValue": "ncsynapse"
		},
		"ADLS_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"ADLS\""
		},
		"AzureAdventureWorksLT_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"AzureAdventureWorksLT\""
		},
		"AzureBlobStorage_LS_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"AzureBlobStorage_LS\""
		},
		"AzureDataLakeStorage_Gen2_accountKey": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"accountKey\" von \"AzureDataLakeStorage_Gen2\""
		},
		"AzureSqlDatabase_DV_LS_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"AzureSqlDatabase_DV_LS\""
		},
		"AzureSqlDatabase_LS_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"AzureSqlDatabase_LS\""
		},
		"Spark1_password": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"password\" von \"Spark1\""
		},
		"azuredatabricks_bigdata_ls_accessToken": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"accessToken\" von \"azuredatabricks_bigdata_ls\""
		},
		"ls_af_functionKey": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"functionKey\" von \"ls_af\""
		},
		"ls_af_gettime_functionKey": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"functionKey\" von \"ls_af_gettime\""
		},
		"ncsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Sichere Zeichenfolge für \"connectionString\" von \"ncsynapse-WorkspaceDefaultSqlServer\""
		},
		"AzureBlobStorageSourceFileStore_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().filename"
		},
		"AzureBlobStorageSourceFileStore_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"AzureBlob_bgdata_daily_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"AzureBlob_bgdata_daily_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FilePath"
		},
		"AzureBlob_bgdata_monthly_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"AzureBlob_bgdata_monthly_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FilePath"
		},
		"AzureBlob_storesales_store01_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlob_storesales_store01_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "storesales/store_01"
		},
		"AzureBlob_storesales_store01_single_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "storeinventory_01_20181027.csv"
		},
		"AzureBlob_storesales_store01_single_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "storesales-source/store_01"
		},
		"AzureBlob_storesales_store02_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlob_storesales_store02_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "storesales/store_02"
		},
		"AzureBlob_storesales_store03_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlob_storesales_store03_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "storesales/store_03"
		},
		"AzureBlob_storesales_storesall_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"AzureBlob_storesales_storesall_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FilePath"
		},
		"AzureDataLakeStoreSinkFileStore_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureDataLakeStoreSinkFileStore_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_FileShare_ds_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "*.txt"
		},
		"Template_FileShare_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "Move"
		},
		"Template_wasb_delete_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "*"
		},
		"Template_wasb_delete_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_wasb_delete_time_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_wasb_single_sink_ds_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().filename"
		},
		"Template_wasb_single_sink_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_wasb_single_source_ds_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().filename"
		},
		"Template_wasb_single_source_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_wasb_sink_ds_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"Template_wasb_sink_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"Template_wasb_source_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().folder"
		},
		"validation_adls_source_ds_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FileFolder"
		},
		"AzureDataLakeStorage_Gen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ncdatalake.dfs.core.windows.net"
		},
		"AzureDataLakeStore_ls_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://azueus2devadlsbdatalake.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStore_ls_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "31d5acce-99ba-40b7-b2a1-f329e04fe742"
		},
		"AzureDataLakeStore_ls_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "6c405d27-de5e-483c-9a68-0aaaad20b363"
		},
		"AzureDataLakeStore_ls_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "big_data"
		},
		"AzureKeyVault_LS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://nckeyvault.vault.azure.net/"
		},
		"FileSystem_ls_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Temp"
		},
		"FileSystem_ls_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "corp\\rayis.imayev"
		},
		"PQ_KEYVAULT_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://nckeyvault.vault.azure.net/"
		},
		"Spark1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "eastus2.azuredatabricks.net"
		},
		"Spark1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "token"
		},
		"ls_af_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://azu-eus-edu-fapp.azurewebsites.net"
		},
		"ls_af_gettime_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://bd-eus2-fapp.azurewebsites.net"
		},
		"ncsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ncdatalake.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/ncsynapsesqlpool100c')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy with Upsert')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"EmpID"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "ADLS",
										"type": "LinkedServiceReference"
									},
									"path": "log/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EmpID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmpID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Function",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Function",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "StartDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StartDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EndDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EndDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": true
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": "ncdatalake/SCD1 Source",
									"filename": "employee2.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AdventureWorks",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "Employee"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Gen2')]",
				"[concat(variables('workspaceId'), '/datasets/AdventureWorks')]",
				"[concat(variables('workspaceId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyFiles_DeleteFiles_Blob')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy all files across multiple containers or buckets from one file-based storage store to another and Email Notification",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink",
											"copyBehavior": "PreserveHierarchy"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Template_wasb_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Template_wasb_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFiles",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Template_wasb_delete",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_LS",
												"type": "LinkedServiceReference"
											},
											"path": "logging"
										},
										"enableLogging": true,
										"recursive": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesales"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesales-staging"
					},
					"par_email_address": {
						"type": "String",
						"defaultValue": "rimayev@hotmail.com"
					}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_sink_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_delete')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyFiles_Message_Email')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy all files across multiple containers or buckets from one file-based storage store to another and Email Notification",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink",
											"copyBehavior": "PreserveHierarchy"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Template_wasb_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Template_wasb_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Email Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEachContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-31.eastus.logic.azure.com:443/workflows/001cc7857fac4b41bd535a8ca3ec9e3e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=f-qhwimTZz8R7fgJ3nz5VTqx0sPOD4akHLeBIDDt5Mg",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().Pipeline}",
								"Message": "Copy Operation finished.",
								"EmailTo": "@pipeline().parameters.par_email_address"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesales"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesales-staging"
					},
					"par_email_address": {
						"type": "String",
						"defaultValue": "rimayev@hotmail.com"
					}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyFiles_Message_ServiceBus')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "List of files",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List of files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List of files').output.childItems",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink",
											"copyBehavior": "PreserveHierarchy"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Template_wasb_single_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Template_wasb_single_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.DestinationFilePath",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Message ID",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageID",
										"value": {
											"value": "@concat(utcnow(),'_',pipeline().RunId)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Queue Message",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Message ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": {
											"value": "@concat('{\"MessageID\":\"', variables('MessageID'), '\",\"FileName\":\"', item().name, '\",\"FileSize\":\"', activity('CopyOneContainer').output.dataWritten,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Queue Message",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Queue Message",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-14.eastus2.logic.azure.com:443/workflows/6a0dc1f33be54f2b8f75ca9c835344b8/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=GkGC-3VSmcQEN6CC4yF8blYGg6mqO-URjSCBb0Ig38c",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"Message": "@variables('Message')",
											"SessionID": "@pipeline().RunId"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesalesfiles"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesalesfiles-staging"
					}
				},
				"variables": {
					"MessageID": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_single_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_single_sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DV_IncrementalLoad_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DV_Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Geography",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Product",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProduct": {},
									"HubProduct": {},
									"SatProduct": {},
									"SinkHubProduct": {},
									"SinkSatProduct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DV_InternetSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_InternetSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceInternetSales": {},
									"LinkInternetSales": {},
									"SatInternetSales": {},
									"SinkLinkInternetSales": {},
									"SinkSatInternetSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DV_Geography",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DV_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Geography",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceGeogrpahy": {},
									"HubGeography": {},
									"SatGeography": {},
									"SinkHubGeography": {},
									"SinkSatGeography": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DV_Customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataVault_Customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCustomer": {},
									"HubCustomer": {},
									"SatCustomer": {},
									"LinkCustomerGeography": {},
									"SinkHubCustomer": {},
									"SinkSatCustomer": {},
									"SinkLinkCustomerGeography": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataVault"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataVault_Product')]",
				"[concat(variables('workspaceId'), '/dataflows/DataVault_InternetSales')]",
				"[concat(variables('workspaceId'), '/dataflows/DataVault_Geography')]",
				"[concat(variables('workspaceId'), '/dataflows/DataVault_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DV_InitialLoad_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "HUB_Product",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "HUB_Product_HK",
											"type": "String"
										},
										"sink": {
											"name": "HUB_Product_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "ProductAlternateKey",
											"type": "String"
										},
										"sink": {
											"name": "ProductAlternateKey",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LOAD_TS",
											"type": "String"
										},
										"sink": {
											"name": "LOAD_TS",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_dvs_product_init_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_DV_HUB_Product",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SAT_Product",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "HUB_Product_HK",
											"type": "String"
										},
										"sink": {
											"name": "HUB_Product_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "WeightUnitMeasureCode",
											"type": "String"
										},
										"sink": {
											"name": "WeightUnitMeasureCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SizeUnitMeasureCode",
											"type": "String"
										},
										"sink": {
											"name": "SizeUnitMeasureCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EnglishProductName",
											"type": "String"
										},
										"sink": {
											"name": "EnglishProductName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "StandardCost",
											"type": "String"
										},
										"sink": {
											"name": "StandardCost",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "FinishedGoodsFlag",
											"type": "String"
										},
										"sink": {
											"name": "FinishedGoodsFlag",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String"
										},
										"sink": {
											"name": "Color",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SafetyStockLevel",
											"type": "String"
										},
										"sink": {
											"name": "SafetyStockLevel",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "ReorderPoint",
											"type": "String"
										},
										"sink": {
											"name": "ReorderPoint",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "ListPrice",
											"type": "String"
										},
										"sink": {
											"name": "ListPrice",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Size",
											"type": "String"
										},
										"sink": {
											"name": "Size",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SizeRange",
											"type": "String"
										},
										"sink": {
											"name": "SizeRange",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Weight",
											"type": "String"
										},
										"sink": {
											"name": "Weight",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "ModelName",
											"type": "String"
										},
										"sink": {
											"name": "ModelName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SAT_Product_HDIFF",
											"type": "String"
										},
										"sink": {
											"name": "SAT_Product_HDIFF",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "LOAD_TS",
											"type": "String"
										},
										"sink": {
											"name": "LOAD_TS",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_dvs_product_init_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_DV_SAT_Product",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LINK_InternetSales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LINK_InternetSales_HK",
											"type": "String"
										},
										"sink": {
											"name": "LINK_InternetSales_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "HUB_Customer_HK",
											"type": "String"
										},
										"sink": {
											"name": "HUB_Customer_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "HUB_Product_HK",
											"type": "String"
										},
										"sink": {
											"name": "HUB_Product_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SalesOrderNumber",
											"type": "String"
										},
										"sink": {
											"name": "SalesOrderNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SalesOrderLineNumber",
											"type": "String"
										},
										"sink": {
											"name": "SalesOrderLineNumber",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "LOAD_TS",
											"type": "String"
										},
										"sink": {
											"name": "LOAD_TS",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_dvs_internetsales_init_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_DV_LINK_InternetSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SAT_InternetSales",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_InternetSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LINK_InternetSales_HK",
											"type": "String"
										},
										"sink": {
											"name": "LINK_InternetSales_HK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "RevisionNumber",
											"type": "String"
										},
										"sink": {
											"name": "RevisionNumber",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "OrderQuantity",
											"type": "String"
										},
										"sink": {
											"name": "OrderQuantity",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "String"
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "ExtendedAmount",
											"type": "String"
										},
										"sink": {
											"name": "ExtendedAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "UnitPriceDiscountPct",
											"type": "String"
										},
										"sink": {
											"name": "UnitPriceDiscountPct",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "DiscountAmount",
											"type": "String"
										},
										"sink": {
											"name": "DiscountAmount",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "ProductStandardCost",
											"type": "String"
										},
										"sink": {
											"name": "ProductStandardCost",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalProductCost",
											"type": "String"
										},
										"sink": {
											"name": "TotalProductCost",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "SalesAmount",
											"type": "String"
										},
										"sink": {
											"name": "SalesAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TaxAmt",
											"type": "String"
										},
										"sink": {
											"name": "TaxAmt",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Freight",
											"type": "String"
										},
										"sink": {
											"name": "Freight",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "CarrierTrackingNumber",
											"type": "String"
										},
										"sink": {
											"name": "CarrierTrackingNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomerPONumber",
											"type": "String"
										},
										"sink": {
											"name": "CustomerPONumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "String"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DueDate",
											"type": "String"
										},
										"sink": {
											"name": "DueDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ShipDate",
											"type": "String"
										},
										"sink": {
											"name": "ShipDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SAT_InternetSales_HDIFF",
											"type": "String"
										},
										"sink": {
											"name": "SAT_InternetSales_HDIFF",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "LOAD_TS",
											"type": "String"
										},
										"sink": {
											"name": "LOAD_TS",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_dvs_internetsales_init_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_DV_SAT_InternetSales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataVault"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_dvs_product_init_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Product')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Product')]",
				"[concat(variables('workspaceId'), '/datasets/ADLS_dvs_internetsales_init_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_LINK_InternetSales')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_InternetSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delete files with Azure Data Factory FileSystem')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_FileShare_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"recursive": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath": {
						"type": "String",
						"defaultValue": "/<mycontainer>/<myfolder>/"
					}
				},
				"folder": {
					"name": "Delete Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_FileShare_ds')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delete files with Azure Data Factory Time')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_delete_time",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.FolderPath",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"recursive": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath": {
						"type": "String",
						"defaultValue": "/storesales/store_01/"
					}
				},
				"folder": {
					"name": "Delete Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_delete_time')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Generic SCD Type1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://techcommunity.microsoft.com/t5/Azure-Data-Factory/Create-Generic-SCD-Pattern-in-ADF-Mapping-Data-Flows/ba-p/918519",
				"activities": [
					{
						"name": "SCD Type1 Generic",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdT1Generic",
								"type": "DataFlowReference",
								"parameters": {
									"dimname": "'dimprods'",
									"keycol": "'ProductNumber'",
									"SurrogateKey": "'ProductID'",
									"tablename": "'DimProducts'"
								},
								"datasetParameters": {
									"NewMembers1": {
										"filename": "DimProducts.csv"
									},
									"ExistingMembers": {
										"tablename": "DimProducts"
									},
									"SetMaxKey": {
										"tablename": "DimProducts"
									},
									"sink1": {
										"tablename": "DimProducts"
									},
									"sink2": {
										"tablename": "DimProducts"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/scdT1Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ValidationActivity_CopyDeleteFiles')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EnumerateFolderList",
						"description": "Scan the file path on your source ADLS and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "validation_adls_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileFolder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "ForEachFolder",
						"description": "Get the folder list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateFolderList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateFolderList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneFolder",
									"description": "Copy each folder from source ADLS to destination ADLS folder.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureDataLakeStoreSource",
											"recursive": true
										},
										"sink": {
											"type": "AzureDataLakeStoreSink"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "validation_adls_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"FileFolder": {
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "validation_adls_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"FileFolder": {
													"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFiles",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyOneFolder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "validation_adls_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"FileFolder": {
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_LS",
												"type": "LinkedServiceReference"
											},
											"path": "logging"
										},
										"enableLogging": true,
										"recursive": true
									}
								}
							]
						}
					},
					{
						"name": "Email Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Run Calculations",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Check if Folder empty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-31.eastus.logic.azure.com:443/workflows/001cc7857fac4b41bd535a8ca3ec9e3e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=f-qhwimTZz8R7fgJ3nz5VTqx0sPOD4akHLeBIDDt5Mg",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().Pipeline}",
								"Message": "Copy Operation finished.",
								"EmailTo": "@pipeline().parameters.par_email_address"
							}
						}
					},
					{
						"name": "Check If Folder exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "validation_adls_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileFolder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"timeout": "7.00:00:00",
							"sleep": 1
						}
					},
					{
						"name": "Check if File exists",
						"type": "Validation",
						"dependsOn": [
							{
								"activity": "Check If Folder exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "validation_adls_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileFolder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"timeout": "7.00:00:00",
							"sleep": 1,
							"childItems": true
						}
					},
					{
						"name": "Check if Folder empty",
						"type": "Validation",
						"dependsOn": [
							{
								"activity": "ForEachFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "validation_adls_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileFolder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"timeout": "7.00:00:00",
							"sleep": 1,
							"childItems": false
						}
					},
					{
						"name": "Run Calculations",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Check if File exists",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEachFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Notebooks/SampleNotebookScala"
						},
						"linkedServiceName": {
							"referenceName": "azuredatabricks_bigdata_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesales"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesales-staging"
					},
					"par_email_address": {
						"type": "String",
						"defaultValue": "rimayev@hotmail.com"
					}
				},
				"folder": {
					"name": "Validation Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/validation_adls_source_ds')]",
				"[concat(variables('workspaceId'), '/linkedServices/azuredatabricks_bigdata_ls')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Workflow_IF_activity_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Conditional File processing",
				"activities": [
					{
						"name": "Get File Names",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Move Files",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.FileAction,'move')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Files",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink",
											"copyBehavior": "PreserveHierarchy"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Template_wasb_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Template_wasb_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.DestinationFilePath",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Data Files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Data Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Template_wasb_delete",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_LS",
												"type": "LinkedServiceReference"
											},
											"path": "logging"
										},
										"enableLogging": true,
										"recursive": true
									}
								}
							]
						}
					},
					{
						"name": "Copy Files",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.FileAction,'copy')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Files 2",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink",
											"copyBehavior": "PreserveHierarchy"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Template_wasb_source_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Template_wasb_sink_ds",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.DestinationFilePath",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Delete Files",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.FileAction,'delete')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Data Files 2",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Template_wasb_delete",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_LS",
												"type": "LinkedServiceReference"
											},
											"path": "logging"
										},
										"enableLogging": true,
										"recursive": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesales"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesales-staging"
					},
					"FileAction": {
						"type": "string",
						"defaultValue": "copy"
					}
				},
				"folder": {
					"name": "Switch Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_sink_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_delete')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Workflow_Switch_activity_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Conditional File processing",
				"activities": [
					{
						"name": "Get File Names",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Template_wasb_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Check File Action",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Get File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FileAction",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "copy",
									"activities": [
										{
											"name": "Copy Data Files 2",
											"description": "Copy each container from source storage store to destination store.",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BlobSource",
													"recursive": true
												},
												"sink": {
													"type": "BlobSink",
													"copyBehavior": "PreserveHierarchy"
												},
												"enableStaging": false,
												"dataIntegrationUnits": 2
											},
											"inputs": [
												{
													"referenceName": "Template_wasb_source_ds",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.SourceFilePath",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "Template_wasb_sink_ds",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.DestinationFilePath",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "delete",
									"activities": [
										{
											"name": "Delete Data Files 2",
											"type": "Delete",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "Template_wasb_delete",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.SourceFilePath",
															"type": "Expression"
														}
													}
												},
												"logStorageSettings": {
													"linkedServiceName": {
														"referenceName": "AzureBlobStorage_LS",
														"type": "LinkedServiceReference"
													},
													"path": "logging"
												},
												"enableLogging": true,
												"recursive": true
											}
										}
									]
								},
								{
									"value": "move",
									"activities": [
										{
											"name": "Copy Data Files",
											"description": "Copy each container from source storage store to destination store.",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [
												{
													"name": "Source",
													"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
												},
												{
													"name": "Destination",
													"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
												}
											],
											"typeProperties": {
												"source": {
													"type": "BlobSource",
													"recursive": true
												},
												"sink": {
													"type": "BlobSink",
													"copyBehavior": "PreserveHierarchy"
												},
												"enableStaging": false,
												"dataIntegrationUnits": 0
											},
											"inputs": [
												{
													"referenceName": "Template_wasb_source_ds",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.SourceFilePath",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "Template_wasb_sink_ds",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.DestinationFilePath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Delete Data Files",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Copy Data Files",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "Template_wasb_delete",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.SourceFilePath",
															"type": "Expression"
														}
													}
												},
												"logStorageSettings": {
													"linkedServiceName": {
														"referenceName": "AzureBlobStorage_LS",
														"type": "LinkedServiceReference"
													},
													"path": "logging"
												},
												"enableLogging": true,
												"recursive": true
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesales-source"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesales-staging"
					},
					"FileAction": {
						"type": "string",
						"defaultValue": "copy"
					}
				},
				"folder": {
					"name": "Switch Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_sink_ds')]",
				"[concat(variables('workspaceId'), '/datasets/Template_wasb_delete')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adf_arrays_sample_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup Notes_Syllabic",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "BLOB_MusicNotes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set_Notes_Alphabet",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Notes_Alphabet",
							"value": {
								"value": "@split(variables('Notes_Alphabet_String'),'-')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Combing Notes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Notes_Syllabic",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set_Notes_Alphabet",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach_Array_Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Notes_Syllabic').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Music Notes",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Notes_Combined",
										"value": {
											"value": "@concat(item().ID,'-',item().Note,'-',variables('Notes_Alphabet')[add(int(item().ID),-1)])",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Notes_Combined_View",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Combing Notes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Notes_Combined_View",
							"value": {
								"value": "@variables('Notes_Combined')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach_Array_Value",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Var_Array_Number')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Wait 1 second",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Notes_Syllabic": {
						"type": "Array"
					},
					"Notes_Alphabet": {
						"type": "Array"
					},
					"Notes_Alphabet_String": {
						"type": "String",
						"defaultValue": "C-D-E-F-G-A-B"
					},
					"Notes_Combined": {
						"type": "Array"
					},
					"Notes_Combined_View": {
						"type": "Array"
					},
					"Var_Array_Text": {
						"type": "Array",
						"defaultValue": [
							"C",
							"D",
							"E",
							"F",
							"G",
							"A",
							"B"
						]
					},
					"Var_Array_Number": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6,
							7
						]
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_MusicNotes')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_email_notify_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ADF pipeline with Email notifications",
				"activities": [
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Logging Copy Data",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_logging",
										"value": {
											"value": "@concat('Copy Data Blob to SQL|Copy|',pipeline().DataFactory,'|',activity('Copy Data Blob to SQL').Duration,'|',activity('Copy Data Blob to SQL').Error,'|',activity('Copy Data Blob to SQL').ExecutionDetails,'|',activity('Copy Data Blob to SQL').ExecutionEndTime,'|',activity('Copy Data Blob to SQL').ExecutionStartTime,'|',activity('Copy Data Blob to SQL').JobId,'|',activity('Copy Data Blob to SQL').Output,'|',pipeline().Pipeline,'|',activity('Copy Data Blob to SQL').ActivityRunId,'|',activity('Copy Data Blob to SQL').Status,'|',activity('Copy Data Blob to SQL').StatusCode)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy Data Errors",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-31.eastus.logic.azure.com:443/workflows/001cc7857fac4b41bd535a8ca3ec9e3e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=f-qhwimTZz8R7fgJ3nz5VTqx0sPOD4akHLeBIDDt5Mg",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"DataFactoryName": "@{pipeline().DataFactory}",
											"PipelineName": "@{pipeline().Pipeline}",
											"ErrorMessage": "@{activity('Copy Data Blob to SQL').Error.message}",
											"EmailTo": "@pipeline().parameters.var_email_address"
										}
									}
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Logging Metadata",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_logging",
							"value": {
								"value": "@concat('Metadata Store 01|Copy|',pipeline().DataFactory,'|',activity('Metadata Store 01').Duration,'|',activity('Metadata Store 01').Error,'|',activity('Metadata Store 01').ExecutionDetails,'|',activity('Metadata Store 01').ExecutionEndTime,'|',activity('Metadata Store 01').ExecutionStartTime,'|',activity('Metadata Store 01').JobId,'|',activity('Metadata Store 01').Output,'|',pipeline().Pipeline,'|',activity('Metadata Store 01').ActivityRunId,'|',activity('Metadata Store 01').Status,'|',activity('Metadata Store 01').StatusCode)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Logging to SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Logging Metadata",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Load data into SQL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_logging')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_adf_pipeline_log_update]",
										"storedProcedureParameters": {
											"ActivityTask": {
												"value": {
													"value": "@split(item(),'|')[0]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityType": {
												"value": {
													"value": "@split(item(),'|')[1]",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory": {
												"value": {
													"value": "@split(item(),'|')[2]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Duration": {
												"value": {
													"value": "@split(item(),'|')[3]",
													"type": "Expression"
												},
												"type": "TimeSpan"
											},
											"Error": {
												"value": {
													"value": "@split(item(),'|')[4]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@split(item(),'|')[5]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionEndTime": {
												"value": {
													"value": "@split(item(),'|')[6]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ExecutionStartTime": {
												"value": {
													"value": "@split(item(),'|')[7]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"JobId": {
												"value": {
													"value": "@split(item(),'|')[8]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Output": {
												"value": {
													"value": "@split(item(),'|')[9]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline": {
												"value": {
													"value": "@split(item(),'|')[10]",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@split(item(),'|')[11]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@split(item(),'|')[12]",
													"type": "Expression"
												},
												"type": "String"
											},
											"StatusCode": {
												"value": {
													"value": "@split(item(),'|')[13]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Check Failed Status",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Stored Procedure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(split(item(),'|')[12], 'Failed')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Failed Email Notification",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Get Error Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-29.eastus.logic.azure.com:443/workflows/b254c91f0139447aa4bf23657e729aff/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=c1ZLiBHQ2uyBi47Hc88M6S_JMPEbamGSJYEeI1YFQbU",
													"method": "POST",
													"headers": {
														"Content-Type": "application/json"
													},
													"body": {
														"DataFactoryName": "@{pipeline().DataFactory}",
														"PipelineName": "@{pipeline().Pipeline}",
														"ErrorMessage": "@variables('var_activity_error_message')",
														"EmailTo": "@pipeline().parameters.var_email_address"
													}
												}
											},
											{
												"name": "Get Error Message",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_activity_error_message",
													"value": {
														"value": "@split(item(),'|')[4]",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Email Alert - Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-29.eastus.logic.azure.com:443/workflows/b254c91f0139447aa4bf23657e729aff/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=c1ZLiBHQ2uyBi47Hc88M6S_JMPEbamGSJYEeI1YFQbU",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().Pipeline}",
								"ErrorMessage": "@activity('Metadata Store 01').Error.message",
								"EmailTo": "@pipeline().parameters.var_email_address"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"var_email_address": {
						"type": "String",
						"defaultValue": "rimayev@hotmail.com"
					}
				},
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					},
					"var_logging": {
						"type": "Array"
					},
					"var_logging_line": {
						"type": "Array"
					},
					"var_activity_status": {
						"type": "String"
					},
					"var_activity_error_message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store01')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_storesall')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_storesales')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_logging_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Logging Copy Data",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Copy Data Blob to SQL",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_logging",
										"value": {
											"value": "@concat('Copy Data Blob to SQL|Copy|',pipeline().DataFactory,'|',activity('Copy Data Blob to SQL').Duration,'|',activity('Copy Data Blob to SQL').Error,'|',activity('Copy Data Blob to SQL').ExecutionDetails,'|',activity('Copy Data Blob to SQL').ExecutionEndTime,'|',activity('Copy Data Blob to SQL').ExecutionStartTime,'|',activity('Copy Data Blob to SQL').JobId,'|',activity('Copy Data Blob to SQL').Output,'|',pipeline().Pipeline,'|',activity('Copy Data Blob to SQL').ActivityRunId,'|',activity('Copy Data Blob to SQL').Status,'|',activity('Copy Data Blob to SQL').StatusCode)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Logging Metadata",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_logging",
							"value": {
								"value": "@concat('Metadata Store 01|Copy|',pipeline().DataFactory,'|',activity('Metadata Store 01').Duration,'|',activity('Metadata Store 01').Error,'|',activity('Metadata Store 01').ExecutionDetails,'|',activity('Metadata Store 01').ExecutionEndTime,'|',activity('Metadata Store 01').ExecutionStartTime,'|',activity('Metadata Store 01').JobId,'|',activity('Metadata Store 01').Output,'|',pipeline().Pipeline,'|',activity('Metadata Store 01').ActivityRunId,'|',activity('Metadata Store 01').Status,'|',activity('Metadata Store 01').StatusCode)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Logging to SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Logging Metadata",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Load data into SQL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_logging')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored Procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_adf_pipeline_log_update]",
										"storedProcedureParameters": {
											"ActivityTask": {
												"value": {
													"value": "@split(item(),'|')[0]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityType": {
												"value": {
													"value": "@split(item(),'|')[1]",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory": {
												"value": {
													"value": "@split(item(),'|')[2]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Duration": {
												"value": {
													"value": "@split(item(),'|')[3]",
													"type": "Expression"
												},
												"type": "TimeSpan"
											},
											"Error": {
												"value": {
													"value": "@split(item(),'|')[4]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@split(item(),'|')[5]",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionEndTime": {
												"value": {
													"value": "@split(item(),'|')[6]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ExecutionStartTime": {
												"value": {
													"value": "@split(item(),'|')[7]",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"JobId": {
												"value": {
													"value": "@split(item(),'|')[8]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Output": {
												"value": {
													"value": "@split(item(),'|')[9]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipeline": {
												"value": {
													"value": "@split(item(),'|')[10]",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@split(item(),'|')[11]",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@split(item(),'|')[12]",
													"type": "Expression"
												},
												"type": "String"
											},
											"StatusCode": {
												"value": {
													"value": "@split(item(),'|')[13]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					},
					"var_logging": {
						"type": "Array"
					},
					"var_logging_line": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store01')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_storesall')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_storesales')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_variable_append_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get FeedType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FeedType",
							"value": {
								"value": "@replace(pipeline().parameters.FileName, 'Sales.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Daily DataFeed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get FeedType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FeedType'), 'Daily')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Daily",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"Date": "Date",
												"Account ID": "Account_ID",
												"Sales": "Sales"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_bgdata_daily",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@pipeline().parameters.FilePath",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_bgdata_daily",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "If Monthly DataFeed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get FeedType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FeedType'), 'Monthly')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Data Monthly",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"Year": "Year",
												"Month": "Month",
												"Account ID": "Account_ID",
												"Total Sales": "Total_Sales"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_bgdata_monthly",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"FilePath": {
													"value": "@pipeline().parameters.FilePath",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_bgdata_monthly",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FilePath": {
						"type": "String",
						"defaultValue": "salesdata/"
					},
					"FileName": {
						"type": "String",
						"defaultValue": "DailySales.csv"
					}
				},
				"variables": {
					"FeedType": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_bgdata_daily')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_bgdata_daily')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_bgdata_monthly')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_bgdata_monthly')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_variable_array_first_element')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set FileList",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileList",
							"value": {
								"value": "@createArray('File', 'Folder')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckFirstElement",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Array First Element",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FirstArrayElement'),'Folder')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait Files 2 sec",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait Folder 1 sec",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Array First Element",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set FileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FirstArrayElement",
							"value": {
								"value": "@variables('FileList')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileList": {
						"type": "Array"
					},
					"FirstArrayElement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_variable_array_many_elements')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Array Variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayVariable",
							"value": {
								"value": "@createArray('A', 'B')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "First Element",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Array Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayElement_1",
							"value": {
								"value": "@variables('ArrayVariable')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Second Element",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Array Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayElement_1",
							"value": {
								"value": "@variables('ArrayVariable')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check Out of Range",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Array Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayElement_OutOfRange",
							"value": {
								"value": "@variables('ArrayVariable')[2]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add New Value",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Check Out of Range",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayVariable",
							"value": "C"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ArrayVariable": {
						"type": "Array"
					},
					"ArrayElement_1": {
						"type": "String"
					},
					"ArrayElement_2": {
						"type": "String"
					},
					"ArrayElement_OutOfRange": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_variable_set_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Metadata Store 02",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store02",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 02",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 02').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 02",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_02/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Validate filename list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filenames Store 02",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filenames Store 03",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filenames Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_check",
							"value": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Metadata Store 03",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store03",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 03",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 03",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 03').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 03",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_03/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Load data into SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Validate filename list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data Blob to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"columnMappings": {
												"store_id": "store_id",
												"date_id": "date_id",
												"product_id": "product_id",
												"stock_amt": "stock_amt"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureBlob_storesales_storesall",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": "storesales",
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable_storesales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filenames Store 01",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Store 01').output.childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Build filename list 01",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list",
										"value": {
											"value": "@concat('store_01/',item().name)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_check": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store02')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store03')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store01')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_storesall')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_storesales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bdata_adf_variable_set_single_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Metadata Store 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_name",
							"value": {
								"value": "@activity('Metadata Store 01').output.itemName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Metadata Store 01",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlob_storesales_store01_single",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName"
							]
						}
					},
					{
						"name": "Copy Data to SQL - V",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Data to SQL - D",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"store_id": "store_id",
									"date_id": "date_id",
									"product_id": "product_id",
									"stock_amt": "stock_amt"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlob_storesales_storesall",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": "storesales-source/store_01",
									"FileName": {
										"value": "@variables('var_file_name')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_storesales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Data to SQL - D",
						"description": "Direct data copy from a file to a sql server table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"store_id": "store_id",
									"date_id": "date_id",
									"product_id": "product_id",
									"stock_amt": "stock_amt"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlob_storesales_store01_single",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_storesales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_store01_single')]",
				"[concat(variables('workspaceId'), '/datasets/AzureBlob_storesales_storesall')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable_storesales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow_flatten_pl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Flatten JSON with cakes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_flatten_task_cakes_JSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceJSONCakes": {},
									"SinkFlattenOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_flatten_task_cakes_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_CreateArray_UseCase')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Job Title",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "JobTitle",
							"value": "Design Engineer"
						}
					},
					{
						"name": "Check Job Title",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set Job Title",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(createArray('Design Engineer', 'Tool Designer', 'Marketing Assistant'),variables('JobTitle'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait 5 Second",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait 1 Second",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"JobTitle": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_PASS_ADF_DataVault')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "df_PASS_ADF_DataVault",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PASS_ADF_DataVault",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceGeography": {},
									"SourceHUBGeography": {},
									"SourcSatGeographyLatest": {},
									"SinkHUbGeography": {},
									"SinkSatGeography": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataVault"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_PASS_ADF_DataVault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_SQL_SP_optional_parameter')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Exec Azure SQL SP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[dbo].[sp_get_week_days]",
								"storedProcedureParameters": {
									"week_number": {
										"type": "Int32",
										"value": "1"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azsql_generic",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_azsql_generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_azurefunction_test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web Activity",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebHook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://bd-eus2-fapp.azurewebsites.net/api/GetTime?code=WPbrtWZpOERh8z8dl2UjJ/Xu8XsaRHk6I49KKikRWzr38B8n6fax4w==",
							"method": "POST",
							"headers": {},
							"body": "{\n    timezone: \"Eastern Standard Time\"\n}"
						}
					},
					{
						"name": "Azure Function",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetTime-AF ",
							"method": "POST",
							"headers": {},
							"body": "{\n    timezone: \"Eastern Standard Time\"\n}"
						},
						"linkedServiceName": {
							"referenceName": "ls_af_gettime",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebHook",
						"type": "WebHook",
						"dependsOn": [
							{
								"activity": "Azure Function",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"url": "https://bd-eus2-fapp.azurewebsites.net/api/GetTime-WH?code=EzOt81JcICeAzV2c4OqFBSy0Hrar9aCHEygHaClJJm7iHds1wYtfKg==",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"timezone": "Eastern Standard Time"
							},
							"timeout": "00:09:00",
							"reportStatusOnCallBack": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azure Functions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_af_gettime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_constant_dynamic_JSON')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_generic_folder",
								"type": "DatasetReference",
								"parameters": {
									"file_folder": "files/system/logs"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Collect Initial File List",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_initial",
							"value": {
								"value": "@activity('Get List of Files').output.childItems",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Merge File List with Constant Values",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Collect Initial File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_merged",
							"value": {
								"value": "@json(\n  replace(\n    concat('[',\n      replace(\n        replace(\n          join(\n            variables('var_file_list_initial'),\n            concat('*', \n              variables('var_constant_json'),'}')\n               )\n        , '}*', ', ')\n      , '}{', '},{')\n    , ']')\n  , '}]', concat(',', variables('var_constant_json'),'}') \n  )\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_file_list_initial": {
						"type": "Array"
					},
					"var_file_list_merged": {
						"type": "Array"
					},
					"var_constant_json": {
						"type": "String",
						"defaultValue": "\"filetype\":\"log\", \"path\":\"files/system/logs\""
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_adls_generic_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_constant_dynamic_JSON_SQL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "declare @JSON nvarchar(max) = '@{pipeline().parameters.Input}';\n\nselect\n\t(\n\tselect\n\t\tjson_value(@JSON, 'strict $.name') as name,\n\t\t(\n\t\t\tselect\n\t\t\t\tname,\n\t\t\t\ttype,\n\t\t\t\t'log' as filetype,\n\t\t\t\t'files/system/logs' as path\n\t\t\tfrom\n\t\t\t\topenjson(@JSON, 'strict $.value')\n\t\t\t\t\twith (\n\t\t\t\t\t\tname nvarchar(max) 'strict $.name',\n\t\t\t\t\t\ttype nvarchar(max) 'strict $.type'\n\t\t\t\t\t)\n\t\t\tfor\n\t\t\t\tjson path\n\t\t) as value\n\tfor\n\t\tjson path,\n\t\twithout_array_wrapper\n\t) as Object\n;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azsql_generic",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Output",
							"value": {
								"value": "@json(activity('Lookup1').output.firstRow.Object)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Input": {
						"type": "object",
						"defaultValue": {
							"name": "var_file_list_initial",
							"value": [
								{
									"name": "01-Monday.log",
									"type": "File"
								},
								{
									"name": "01-Tuesday.log",
									"type": "File"
								},
								{
									"name": "01-Wednesday.log",
									"type": "File"
								},
								{
									"name": "01-Thursday.log",
									"type": "File"
								},
								{
									"name": "01-Friday.log",
									"type": "File"
								}
							]
						}
					}
				},
				"variables": {
					"Output": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_azsql_generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_data_json_flatten')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get JSON data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"dataset": {
								"referenceName": "ls_json_flatten_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "For Each Events",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get JSON data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get JSON data').output.firstRow.events",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Log Event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_adf_pipeline_log_event]",
										"storedProcedureParameters": {
											"process": {
												"value": {
													"value": "@item().process",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@item().start_time",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stop_time": {
												"value": {
													"value": "@item().stop_time",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"last_update": {
												"value": {
													"value": "@item().last_update",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"event": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ls_json_flatten_data')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_data_json_flatten_corrected')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get JSON data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"dataset": {
								"referenceName": "ls_json_flatten_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "For Each Events",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get JSON data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get JSON data').output.firstRow.events",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Log Event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_adf_pipeline_log_event]",
										"storedProcedureParameters": {
											"process": {
												"value": {
													"value": "@item().process",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@item().start_time",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stop_time": {
												"value": {
													"value": "@if(contains(string(item()),'\"stop_time\":'),item().stop_time,null)",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"last_update": {
												"value": {
													"value": "@if(contains(string(item()),'\"last_update\":'),item().last_update,utcNow())",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"event": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ls_json_flatten_data')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_default_value_array')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Each Parameter Meal",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.par_meal_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "pl_meal_array_child",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_default_value_array_child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"par_meal_array": {
												"value": "@item().meal_items",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_meal_array": {
						"type": "array",
						"defaultValue": [
							{
								"meal_type": "Breakfast",
								"meal_time": "07:00:00",
								"meal_items": [
									"Egg",
									"Greek Yogurt",
									"Coffee"
								]
							},
							{
								"meal_type": "Lunch",
								"meal_time": "12:00:00",
								"meal_items": [
									"Greek Salad",
									"Salmon Bagels",
									"Tea"
								]
							},
							{
								"meal_type": "Dinner",
								"meal_time": "18:00:00",
								"meal_items": [
									"Kale Salad",
									"Lentil Soup",
									"Water"
								]
							}
						]
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_default_value_array_child')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_default_value_array_child')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Each Parameter Meal",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.par_meal_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait 1 second",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_meal_array": {
						"type": "array",
						"defaultValue": [
							"Egg",
							"Greek Yogurt",
							"Coffee"
						]
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_default_value_array_variable')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Each Variable Meal",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait 1 second_copy1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Set Array",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_array",
							"value": {
								"value": "@split(pipeline().parameters.par_meal_string,',')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_meal_string": {
						"type": "string",
						"defaultValue": "Egg,Greek Yogurt,Coffee"
					}
				},
				"variables": {
					"var_array": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_durable_function_loop_polling')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Azure Durable Function call",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Set Input for Function App",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "orchestrators/DurableFunctions-Orchestrator",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@variables('var_input')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_af",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check Completed Status",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Azure Durable Function call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(or(equals(activity('Get Current Function Status').output.runtimeStatus, 'Pending'), equals(activity('Get Current Function Status').output.runtimeStatus, 'Running')))\n\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait 5 seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								},
								{
									"name": "Get Current Function Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait 5 seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('Azure Durable Function call').output.statusQueryGetUri\n",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Set Input for Function App",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_input",
							"value": "{\"timezone\":\"Eastern Standard Time\"}"
						}
					},
					{
						"name": "Get Function App Output",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check Completed Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_output",
							"value": {
								"value": "@activity('Get Current Function Status').output.output.Response",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_input": {
						"type": "String"
					},
					"var_output": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Functions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_af')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_durable_function_simple_polling')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Call Azure Durable Function",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Set Input for Function App",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "orchestrators/DurableFunctions-Orchestrator",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@variables('var_input')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_af",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Input for Function App",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_input",
							"value": "{\"timezone\":\"Eastern Standard Time\"}"
						}
					},
					{
						"name": "Get Function App Output",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Current Function Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_output",
							"value": {
								"value": "@activity('Get Current Function Status').output.output.Response",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Current Function Status",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Call Azure Durable Function",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('Call Azure Durable Function').output.statusQueryGetUri\n",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_input": {
						"type": "String"
					},
					"var_output": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Functions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_af')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_durable_function_simple_polling_safe')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Input for Function App",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_input",
							"value": "{\"timezone\":\"Eastern Standard Time\"}"
						}
					},
					{
						"name": "Get Function App Output",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Azure Function Execution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_output",
							"value": {
								"value": "@activity('Get Current Function Status').output.output.Response",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Azure Function Execution",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Input for Function App",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Current Function Status').output.output.Status, 'OK')\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Call Azure Durable Function",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "orchestrators/DurableFunctions-Orchestrator",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@variables('var_input')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_af",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Current Function Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Call Azure Durable Function",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('Call Azure Durable Function').output.statusQueryGetUri\n",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {}
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_input": {
						"type": "String"
					},
					"var_output": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Functions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_af')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_fail_activity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "File Name",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_filename",
							"value": "''"
						}
					},
					{
						"name": "Folder Name",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_foldername",
							"value": "files"
						}
					},
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "File not Found",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Check Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Source file not found",
							"errorCode": "3000"
						}
					},
					{
						"name": "Check Files",
						"type": "Validation",
						"dependsOn": [
							{
								"activity": "File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Folder Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.00:00:10",
							"sleep": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_filename": {
						"type": "String"
					},
					"var_foldername": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Fail Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_fail_activity_old')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "File Name",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_filename",
							"value": "''"
						}
					},
					{
						"name": "Folder Name",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_foldername",
							"value": "files"
						}
					},
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Files",
						"type": "Validation",
						"dependsOn": [
							{
								"activity": "File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Folder Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_Gen2",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@variables('var_foldername')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('var_filename')",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.00:00:10",
							"sleep": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_filename": {
						"type": "String"
					},
					"var_foldername": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Fail Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_general_email_attachement')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Logic App Send Notification Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Body Request",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-20.canadaeast.logic.azure.com:443/workflows/f74fb74643cb427a9c22455a67090e1f/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8MHT5wxyFbZ4_7gwwuv37rk1KjBuI6NsrBtVU9SfL50",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@variables('var_web_body_request')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Body Request",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set var_file_list_string",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Email Subject",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Email Body",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Email Body Recipients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_web_body_request",
							"value": {
								"value": "@concat('{\"EmailBody\":\"',variables('var_email_body')\n,'\",\"EmailTo\":\"',variables('var_email_to')\n,'\",\"EmailSubject\":\"',variables('var_email_subject')\n,'\",\"FileList\":\"',variables('var_file_list_string')\n,'\"}\"')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set var_file_list_string",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create Final File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_file_list_string",
							"value": {
								"value": "@replace(\n                 replace(\n                              replace(\n                                           string(\n                                                      variables('var_file_list_final')\n                                                     )\n                                           ,'\",\"',',')\n                               ,'[\"','[')\n                  ,'\"]',']')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Template Settings",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ADLS_dvs_internetsales_init_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Email Subject",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Email Template Settings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_subject",
							"value": {
								"value": "@concat(\n activity('Email Template Settings').output.firstRow.email_config_attachment.email_subject\n, pipeline().parameters.par_operation_type\n, if(not(\n            equals(pipeline().DataFactory,'omaccefprodadf01')\n            )\n, concat(' - '\n, toUpper(\n                 replace(\n                 replace(pipeline().DataFactory, 'omaccef', ''), 'adf01','')\n                 )\n             ),'')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Body",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Email Template Settings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_body",
							"value": {
								"value": "@replace(\nactivity('Email Template Settings').output.firstRow.email_config_attachment.email_body\n, '@operation_type'\n, pipeline().parameters.par_operation_type\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Body Recipients",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Email Template Settings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_to",
							"value": {
								"value": "@activity('Email Template Settings').output.firstRow.email_config_attachment.email_to",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each File List",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.par_folder_files",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get List of Files",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_Gen2",
											"type": "DatasetReference",
											"parameters": {
												"folder": "ncdatalake/SCD1 Source",
												"filename": "*"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Keep only files",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Get List of Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get List of Files').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().type,'File')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set File List Start",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Keep only files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list_start",
										"value": {
											"value": "@JSON(\nreplace(\nconcat('[',\nreplace(\nreplace(\njoin(activity('Keep only files').output.Value,concat('*\"filetype\":\"',item().filetype,'\", \"path\":\"',item().path,'\"}'))\n, '}*', ', ')\n, '}{', '},{')\n, ']')\n, '}]', concat(', \"filetype\":\"',item().filetype,'\", \"path\":\"',item().path,'\"}') )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Combine File List Start with Mid",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set File List Start",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list_end",
										"value": {
											"value": "@union(variables('var_file_list_start'), variables('var_file_list_mid'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Preserve File List Mid from End",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Combine File List Start with Mid",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list_mid",
										"value": {
											"value": "@variables('var_file_list_end')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Final File List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "For Each File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('var_file_list_end')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Final File List",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_file_list_final",
										"value": {
											"value": "@concat(\n'{\"DisplayName\":\"',item().name\n,'\",\"Path\":\"',item().path,'/', item().name\n,'\",\"FileType\":\"', item().filetype\n,'\"}'\n)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_operation_type": {
						"type": "string",
						"defaultValue": "IOA Hedge"
					},
					"par_folder_files": {
						"type": "array",
						"defaultValue": [
							{
								"path": "log/",
								"filetype": "log"
							},
							{
								"path": "processed/",
								"filetype": "data"
							}
						]
					}
				},
				"variables": {
					"var_web_body_request": {
						"type": "String"
					},
					"var_file_list": {
						"type": "Array"
					},
					"var_file_list_string": {
						"type": "String"
					},
					"var_file_list_start": {
						"type": "Array"
					},
					"var_file_list_end": {
						"type": "Array"
					},
					"var_email_subject": {
						"type": "String"
					},
					"var_email_body": {
						"type": "String"
					},
					"var_email_to": {
						"type": "String"
					},
					"var_file_list_mid": {
						"type": "Array"
					},
					"var_file_list_final": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_dvs_internetsales_init_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ADLS_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_html_formatted_email')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Azure SQL SP with Output",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[dbo].[sp_top_10_selling_products]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azsql_generic",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Email Body",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Azure SQL SP with Output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_body",
							"value": {
								"value": "@activity('Execute Azure SQL SP with Output').output.value[0].output_result",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Email Recipient",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_to",
							"value": "rimayev@hotmail.com"
						}
					},
					{
						"name": "Set Email Subject",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_email_subject",
							"value": "Top 10 Selling Products"
						}
					},
					{
						"name": "Email Notfication",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Email Recipient",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Email Body",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Email Subject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-48.eastus2.logic.azure.com:443/workflows/3e3e32bccb5843e8b5c1ef0821498737/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=IKBjhnmOVsuPxor_PYtuyjK9o38fLUB4WNorY-5THro",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"EmailTo": "@variables('var_email_to')",
								"EmailSubject": "@variables('var_email_subject')",
								"EmailBody": "@variables('var_email_body')"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_email_body": {
						"type": "String"
					},
					"var_email_to": {
						"type": "String"
					},
					"var_email_subject": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Functions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_azsql_generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_json_arrays')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "List of files and folders",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "validation_adls_source_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileFolder": "storesales"
								}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType",
								"lastModified"
							]
						}
					},
					{
						"name": "Set Complete Task output",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "List of files and folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_json_payload",
							"value": {
								"value": "@array(activity('List of files and folders').output)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Sub Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "List of files and folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_json_subarray",
							"value": {
								"value": "@activity('List of files and folders').output.childitems",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Reading JSON file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"dataset": {
								"referenceName": "ds_json_dataflow_sample",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each JSON element",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Reading JSON file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Reading JSON file').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Baking pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_json_arrays_sub",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"param_baking_payload": {
												"value": "@array(item())",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_json_payload": {
						"type": "Array"
					},
					"var_json_subarray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/validation_adls_source_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ds_json_dataflow_sample')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_json_arrays_sub')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_json_arrays_sub')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Toppings",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Baking Recepie",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_toppings",
							"value": {
								"value": "@variables('var_baking_payload')[0].topping",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Batters",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Baking Recepie",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_batters",
							"value": {
								"value": "@variables('var_baking_payload')[0].batters.batter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Baking Recepie",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_baking_payload",
							"value": {
								"value": "@pipeline().parameters.param_baking_payload",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param_baking_payload": {
						"type": "array"
					}
				},
				"variables": {
					"var_toppings": {
						"type": "Array"
					},
					"var_batters": {
						"type": "Array"
					},
					"var_baking_payload": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "JSON data"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_passing_array_between_pipelines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Array Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "pl_passing_array_between_pipelines_child",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_meal_array",
							"value": {
								"value": "@json('[\"Egg\",\"Toast\",\"Coffee\"]')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "pl_passing_array_between_pipelines_child",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_passing_array_child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"par_meal_array": {
									"value": "@json('[\"Egg\",\"Toast\",\"Coffee\"]')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_meal_array": {
						"type": "array",
						"defaultValue": [
							"Egg",
							"Toast",
							"Coffee"
						]
					}
				},
				"variables": {
					"var_meal_array": {
						"type": "Array",
						"defaultValue": [
							"Egg",
							"Toast",
							"Coffee"
						]
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_passing_array_child')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_passing_array_child')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Array Variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_meal_array",
							"value": {
								"value": "@pipeline().parameters.par_meal_array",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_meal_array": {
						"type": "array",
						"defaultValue": [
							"Egg",
							"Toast",
							"Coffee"
						]
					}
				},
				"variables": {
					"var_meal_array": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Working with Arrays"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS_Gen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TaxiDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS_dvs_internetsales_init_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "dvs_internetsales.csv",
						"folderPath": "AdventureWorksDataVault/InitialLoad"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStore_ls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS_dvs_product_init_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "dvs_product.csv",
						"folderPath": "AdventureWorksDataVault/InitialLoad"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "String"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "String"
					},
					{
						"name": "ReorderPoint",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "HUB_Product_HK",
						"type": "String"
					},
					{
						"name": "SAT_Product_HDIFF",
						"type": "String"
					},
					{
						"name": "LOAD_TS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStore_ls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_HUB_Customer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Customer_HK",
						"type": "varchar"
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HUB_Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_HUB_Geography')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Geography_HK",
						"type": "varchar"
					},
					{
						"name": "GeographyAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HUB_Geography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_HUB_Product')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Product_HK",
						"type": "varchar"
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[HUB_Product]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_LINK_CustomerGeography')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LINK_CustomerGeography_HK",
						"type": "varchar"
					},
					{
						"name": "HUB_Customer_HK",
						"type": "varchar"
					},
					{
						"name": "HUB_Geography_HK",
						"type": "varchar"
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "GeographyAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "LINK_CustomerGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_LINK_InternetSales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LINK_InternetSales_HK",
						"type": "varchar"
					},
					{
						"name": "HUB_Customer_HK",
						"type": "varchar"
					},
					{
						"name": "HUB_Product_HK",
						"type": "varchar"
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[LINK_InternetSales]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Customer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Customer_HK",
						"type": "varchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "SAT_Customer_HDIFF",
						"type": "varchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SAT_Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Customer_Latest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Customer_HK",
						"type": "varchar"
					},
					{
						"name": "SAT_Customer_HDIFF",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_latest_sat_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Geography')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Geography_HK",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvinceCode",
						"type": "nvarchar"
					},
					{
						"name": "StateProvinceName",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegionCode",
						"type": "nvarchar"
					},
					{
						"name": "EnglishCountryRegionName",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "SAT_Geography_HDIFF",
						"type": "varchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SAT_Geography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Geography_Latest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Geography_HK",
						"type": "varchar"
					},
					{
						"name": "SAT_Geography_HDIFF",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_latest_sat_geography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_InternetSales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LINK_InternetSales_HK",
						"type": "varchar"
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderQuantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ExtendedAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscountPct",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DiscountAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ProductStandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalProductCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SalesAmount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerPONumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SAT_InternetSales_HDIFF",
						"type": "varchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[SAT_InternetSales]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_InternetSales_Latest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LINK_InternetSales_HK",
						"type": "varchar"
					},
					{
						"name": "SAT_InternetSales_HDIFF",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[vw_latest_sat_internetsales]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Product')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Product_HK",
						"type": "varchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "EnglishProductName",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeRange",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ModelName",
						"type": "nvarchar"
					},
					{
						"name": "SAT_Product_HDIFF",
						"type": "varchar"
					},
					{
						"name": "LOAD_TS",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[SAT_Product]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASQL_DV_SAT_Product_Latest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_DV_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "HUB_Product_HK",
						"type": "varchar"
					},
					{
						"name": "SAT_Product_HDIFF",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[vw_latest_sat_product]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_DV_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdventureWorks')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureAdventureWorksLT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "Employee"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "Function",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "nvarchar"
					},
					{
						"name": "EndDate",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureAdventureWorksLT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorageSourceFileStore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"fileName": {
						"value": "[parameters('AzureBlobStorageSourceFileStore_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureBlobStorageSourceFileStore_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_bgdata_daily')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Account ID",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": {
						"value": "[parameters('AzureBlob_bgdata_daily_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureBlob_bgdata_daily_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_bgdata_monthly')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "String"
					},
					"FilePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					},
					{
						"name": "Account ID",
						"type": "String"
					},
					{
						"name": "Total Sales",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": {
						"value": "[parameters('AzureBlob_bgdata_monthly_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureBlob_bgdata_monthly_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_storesales_store01')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('AzureBlob_storesales_store01_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob_storesales_store01_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_storesales_store01_single')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "store_id",
						"type": "String"
					},
					{
						"name": "date_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "stock_amt",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('AzureBlob_storesales_store01_single_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob_storesales_store01_single_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_storesales_store02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('AzureBlob_storesales_store02_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob_storesales_store02_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_storesales_store03')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('AzureBlob_storesales_store03_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob_storesales_store03_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlob_storesales_storesall')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "store_id",
						"type": "String"
					},
					{
						"name": "date_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "stock_amt",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": {
						"value": "[parameters('AzureBlob_storesales_storesall_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureBlob_storesales_storesall_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStoreSinkFileStore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"fileName": "[parameters('AzureDataLakeStoreSinkFileStore_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('AzureDataLakeStoreSinkFileStore_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStore_ls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable_bgdata_daily')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "Date",
						"type": "DateTime"
					},
					{
						"name": "Account_ID",
						"type": "Int32"
					},
					{
						"name": "Sales",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[DailySales]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable_bgdata_monthly')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "Year",
						"type": "Int32"
					},
					{
						"name": "Month",
						"type": "Int32"
					},
					{
						"name": "Account_ID",
						"type": "Int32"
					},
					{
						"name": "Total_Sales",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[MonthlySales]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable_storesales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "store_id",
						"type": "String"
					},
					{
						"name": "date_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "stock_amt",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[storeinventory]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_MusicNotes')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Other Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Notes.csv",
						"container": "otherfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Note",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_dvs_customer_incr_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dvs_customer.csv",
						"container": "adventureworksdv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerAlternateKey",
						"type": "String"
					},
					{
						"name": "GeographyAlternateKey",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "BirthDate",
						"type": "String"
					},
					{
						"name": "MaritalStatus",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "YearlyIncome",
						"type": "String"
					},
					{
						"name": "TotalChildren",
						"type": "String"
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "String"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "String"
					},
					{
						"name": "NumberCarsOwned",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "AddressLine2",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_dvs_geography_incr_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "adventureworksdv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "GeographyAlternateKey",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "StateProvinceCode",
						"type": "String"
					},
					{
						"name": "StateProvinceName",
						"type": "String"
					},
					{
						"name": "CountryRegionCode",
						"type": "String"
					},
					{
						"name": "EnglishCountryRegionName",
						"type": "String"
					},
					{
						"name": "PostalCode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_dvs_internetsales_incr_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dvs_internetsales_big.csv",
						"container": "adventureworksdv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "CustomerAlternateKey",
						"type": "String"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "SalesOrderLineNumber",
						"type": "String"
					},
					{
						"name": "RevisionNumber",
						"type": "String"
					},
					{
						"name": "OrderQuantity",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "ExtendedAmount",
						"type": "String"
					},
					{
						"name": "UnitPriceDiscountPct",
						"type": "String"
					},
					{
						"name": "DiscountAmount",
						"type": "String"
					},
					{
						"name": "ProductStandardCost",
						"type": "String"
					},
					{
						"name": "TotalProductCost",
						"type": "String"
					},
					{
						"name": "SalesAmount",
						"type": "String"
					},
					{
						"name": "TaxAmt",
						"type": "String"
					},
					{
						"name": "Freight",
						"type": "String"
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "String"
					},
					{
						"name": "CustomerPONumber",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "ShipDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_dvs_product_incr_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataVaultTesting"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dvs_product_big.csv",
						"container": "adventureworksdv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "String"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "String"
					},
					{
						"name": "ReorderPoint",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BlobInputFolder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BlobInputFolder1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BlobInputFolder2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParameterTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureAdventureWorksLT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "DimProducts"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureAdventureWorksLT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParameterTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureAdventureWorksLT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "DimProducts"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureAdventureWorksLT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParameterTable2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureAdventureWorksLT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "DimProducts"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureAdventureWorksLT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TaxiSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TaxiDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "taxi_output",
						"fileSystem": "nyctaxidata-staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_FileShare_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileSystem_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('Template_FileShare_ds_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Template_FileShare_ds_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/FileSystem_ls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_delete')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": "[parameters('Template_wasb_delete_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('Template_wasb_delete_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_delete_time')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('Template_wasb_delete_time_properties_typeProperties_folderPath')]",
						"type": "Expression"
					},
					"modifiedDatetimeEnd": {
						"value": "@addseconds(pipeline().TriggerTime, -10)",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_single_sink_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('Template_wasb_single_sink_ds_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('Template_wasb_single_sink_ds_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_single_source_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('Template_wasb_single_source_ds_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('Template_wasb_single_source_ds_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_sink_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": "[parameters('Template_wasb_sink_ds_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('Template_wasb_sink_ds_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Template_wasb_source_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Template Datasets"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('Template_wasb_source_ds_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TaxiDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_data_1.csv",
						"fileSystem": "ncdatalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFares')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TaxiDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_fare_1.csv",
						"folderPath": "trip_fare",
						"fileSystem": "nyctaxidata-staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "surcharge",
						"type": "String"
					},
					{
						"name": "mta_tax",
						"type": "String"
					},
					{
						"name": "tip_amount",
						"type": "String"
					},
					{
						"name": "tolls_amount",
						"type": "String"
					},
					{
						"name": "total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_adf_dataflows')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string",
						"defaultValue": "DtcInstall.log"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"fileSystem": "adf-dataflows"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_generic_folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().file_folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_azsql_generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Address"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dataflow_output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dataflows"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_dataflow_sample')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ManyJSON_Objects - CSV.csv",
						"container": "jsondata"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "{\"id\":\"0001\",\"type\":\"donut\",\"name\":\"Cake\",\"ppu\":0.55,\"batters\":{\"batter\":[{\"id\":\"1001\",\"type\":\"Regular\"},{\"id\":\"1002\",\"type\":\"Chocolate\"},{\"id\":\"1003\",\"type\":\"Blueberry\"},{\"id\":\"1004\",\"type\":\"Devil's Food\"}]},\"topping\":[{\"id\":\"5001\",\"type\":\"None\"},{\"id\":\"5002\",\"type\":\"Glazed\"},{\"id\":\"5005\",\"type\":\"Sugar\"},{\"id\":\"5007\",\"type\":\"Powdered Sugar\"},{\"id\":\"5006\",\"type\":\"Chocolate with Sprinkles\"},{\"id\":\"5003\",\"type\":\"Chocolate\"},{\"id\":\"5004\",\"type\":\"Maple\"}]}",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_df_temperature_data')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "GlobalLandTemperaturesByMajorCity.csv",
						"container": "dataflows"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dt",
						"type": "String"
					},
					{
						"name": "AverageTemperature",
						"type": "String"
					},
					{
						"name": "AverageTemperatureUncertainty",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Latitude",
						"type": "String"
					},
					{
						"name": "Longitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_df_temperature_header')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "GlobalLandTemperaturesByMajorCity-Header.csv",
						"container": "dataflows"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_df_temperature_output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dataflows"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json_dataflow_sample')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ManyJSON_Objects.json",
						"container": "jsondata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json_output_temp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "jsondata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json_temp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Test_JSON.txt",
						"fileSystem": "jsondata"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpId",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "Detail",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Gen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_json_flatten_data')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "json_data_file.json",
						"container": "dataflows"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"events": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"process": {
										"type": "string"
									},
									"start_time": {
										"type": "string"
									},
									"stop_time": {
										"type": "string"
									},
									"last_update": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/validation_adls_source_ds')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Other Datasets"
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"folderPath": {
						"value": "[parameters('validation_adls_source_ds_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStore_ls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ADLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureAdventureWorksLT')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureAdventureWorksLT_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage_Gen2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_Gen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_Gen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStore_ls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore_ls_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStore_ls_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore_ls_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore_ls_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_LS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase_DV_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_DV_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FileSystem_ls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileSystem_ls_properties_typeProperties_host')]",
					"userId": "[parameters('FileSystem_ls_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_LS",
							"type": "LinkedServiceReference"
						},
						"secretName": "local-machine-account-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PQ_KEYVAULT')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('PQ_KEYVAULT_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Spark",
				"typeProperties": {
					"host": "[parameters('Spark1_properties_typeProperties_host')]",
					"port": 443,
					"serverType": "SparkThriftServer",
					"thriftTransportProtocol": "HTTP",
					"authenticationType": "UsernameAndPassword",
					"username": "[parameters('Spark1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Spark1_password')]"
					},
					"httpPath": "sql/protocolv1/o/1381793306306739/1214-144601-sedan385",
					"enableSsl": true,
					"useSystemTrustStore": false,
					"allowHostNameCNMismatch": false,
					"allowSelfSignedServerCert": false
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azuredatabricks_bigdata_ls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-5199595547258297.17.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('azuredatabricks_bigdata_ls_accessToken')]"
					},
					"existingClusterId": "0120-204904-pucg2yrh"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_af')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ls_af_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ls_af_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_af_gettime')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ls_af_gettime_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ls_af_gettime_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ncsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ncsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ncsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ncsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ssis-lift')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Germany West Central",
						"nodeSize": "Standard_D2_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 2
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "ncsqldbserver.database.windows.net",
							"catalogAdminUserName": "sqladmin",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "**********"
							},
							"catalogPricingTier": "S1"
						},
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataVault_Customer')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_customer_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Customer",
								"type": "DatasetReference"
							},
							"name": "HubCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Customer_Latest",
								"type": "DatasetReference"
							},
							"name": "SatCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_CustomerGeography",
								"type": "DatasetReference"
							},
							"name": "LinkCustomerGeography"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Customer",
								"type": "DatasetReference"
							},
							"name": "SinkHubCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Customer",
								"type": "DatasetReference"
							},
							"name": "SinkSatCustomer"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_CustomerGeography",
								"type": "DatasetReference"
							},
							"name": "SinkLinkCustomerGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewCustomer"
						},
						{
							"name": "NewHubCustomer"
						},
						{
							"name": "CheckNewSatCustomer"
						},
						{
							"name": "NewSatCustomer"
						},
						{
							"name": "CheckNewLinkCustomerGeography"
						},
						{
							"name": "NewLinkCustomerGeography"
						}
					],
					"script": "source(output(\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tNameStyle as string,\n\t\tBirthDate as string,\n\t\tMaritalStatus as string,\n\t\tSuffix as string,\n\t\tGender as string,\n\t\tEmailAddress as string,\n\t\tYearlyIncome as string,\n\t\tTotalChildren as string,\n\t\tNumberChildrenAtHome as string,\n\t\tHouseOwnerFlag as string,\n\t\tNumberCarsOwned as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceCustomer\nsource(output(\n\t\tHUB_Customer_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubCustomer\nsource(output(\n\t\tHUB_Customer_HK as string,\n\t\tSAT_Customer_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatCustomer\nsource(output(\n\t\tLINK_CustomerGeography_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Geography_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LinkCustomerGeography\nSourceCustomer derive(LINK_CustomerGeography_HK = sha2(512, CustomerAlternateKey, GeographyAlternateKey),\n\t\tHUB_Customer_HK = sha2(512, CustomerAlternateKey),\n\t\tHUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tSAT_Customer_HDIFF = sha2(512, CustomerAlternateKey, GeographyAlternateKey,Title,FirstName,MiddleName,LastName,NameStyle,BirthDate,MaritalStatus,Suffix,Gender,EmailAddress,YearlyIncome,TotalChildren,NumberChildrenAtHome,HouseOwnerFlag,NumberCarsOwned,AddressLine1,AddressLine2),\n\t\tLOAD_TS = currentTimestamp()) ~> HashColumns\nHashColumns, HubCustomer exists(HashColumns@HUB_Customer_HK == HubCustomer@HUB_Customer_HK,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewCustomer\nCheckNewCustomer select(mapColumn(\n\t\tCustomerAlternateKey,\n\t\tHUB_Customer_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewHubCustomer\nHashColumns, SatCustomer exists(HashColumns@HUB_Customer_HK == SatCustomer@HUB_Customer_HK\n\t&& HashColumns@SAT_Customer_HDIFF == SatCustomer@SAT_Customer_HDIFF,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewSatCustomer\nCheckNewSatCustomer select(mapColumn(\n\t\tTitle,\n\t\tFirstName,\n\t\tMiddleName,\n\t\tLastName,\n\t\tNameStyle,\n\t\tBirthDate,\n\t\tMaritalStatus,\n\t\tSuffix,\n\t\tGender,\n\t\tEmailAddress,\n\t\tYearlyIncome,\n\t\tTotalChildren,\n\t\tNumberChildrenAtHome,\n\t\tHouseOwnerFlag,\n\t\tNumberCarsOwned,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tHUB_Customer_HK,\n\t\tSAT_Customer_HDIFF,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatCustomer\nHashColumns, LinkCustomerGeography exists(HashColumns@LINK_CustomerGeography_HK == LinkCustomerGeography@LINK_CustomerGeography_HK,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewLinkCustomerGeography\nCheckNewLinkCustomerGeography select(mapColumn(\n\t\tCustomerAlternateKey,\n\t\tGeographyAlternateKey,\n\t\tLINK_CustomerGeography_HK,\n\t\tHUB_Customer_HK,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewLinkCustomerGeography\nNewHubCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Customer_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkHubCustomer\nNewSatCustomer sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Customer_HK as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tNameStyle as boolean,\n\t\tBirthDate as date,\n\t\tMaritalStatus as string,\n\t\tSuffix as string,\n\t\tGender as string,\n\t\tEmailAddress as string,\n\t\tYearlyIncome as decimal(19,4),\n\t\tTotalChildren as integer,\n\t\tNumberChildrenAtHome as integer,\n\t\tHouseOwnerFlag as string,\n\t\tNumberCarsOwned as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tSAT_Customer_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSatCustomer\nNewLinkCustomerGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tLINK_CustomerGeography_HK as string,\n\t\tHUB_Customer_HK as string,\n\t\tHUB_Geography_HK as string,\n\t\tCustomerAlternateKey as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkLinkCustomerGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_customer_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Customer')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Customer_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_LINK_CustomerGeography')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataVault_Geography')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeogrpahy"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "HubGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SatGeography"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkHubGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "NewHubGeography"
						},
						{
							"name": "CheckNewSatGeography"
						},
						{
							"name": "NewSatGeography"
						}
					],
					"script": "source(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceGeogrpahy\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HubGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SatGeography\nSourceGeogrpahy derive(HUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tSAT_Geography_HDIFF = sha2(512, GeographyAlternateKey, City, StateProvinceCode, StateProvinceName, CountryRegionCode, EnglishCountryRegionName, PostalCode)) ~> HashColumns\nHashColumns, HubGeography exists(HashColumns@HUB_Geography_HK == HubGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'both')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS,\n\t\tHUB_Geography_HK\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewHubGeography\nHashColumns, SatGeography exists(HashColumns@HUB_Geography_HK == SatGeography@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SatGeography@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewSatGeography\nCheckNewSatGeography select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS,\n\t\tSAT_Geography_HDIFF\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NewSatGeography\nNewHubGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkHubGeography\nNewSatGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tSAT_Geography_HDIFF,\n\t\tLOAD_TS\n\t)) ~> SinkSatGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_geography_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Geography')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataVault_InternetSales')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_internetsales_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceInternetSales"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_InternetSales",
								"type": "DatasetReference"
							},
							"name": "LinkInternetSales"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_InternetSales_Latest",
								"type": "DatasetReference"
							},
							"name": "SatInternetSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_LINK_InternetSales",
								"type": "DatasetReference"
							},
							"name": "SinkLinkInternetSales"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_InternetSales",
								"type": "DatasetReference"
							},
							"name": "SinkSatInternetSales"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewLinkInternetSales"
						},
						{
							"name": "NewLinkInternetSales"
						},
						{
							"name": "CheckNewSatInternetSales"
						},
						{
							"name": "NewSatProduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductAlternateKey as string,",
						"          CustomerAlternateKey as string,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as double,",
						"          ExtendedAmount as double,",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as double,",
						"          TotalProductCost as double,",
						"          SalesAmount as double,",
						"          TaxAmt as double,",
						"          Freight as double,",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as date,",
						"          DueDate as date,",
						"          ShipDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceInternetSales",
						"source(output(",
						"          LINK_InternetSales_HK as string,",
						"          HUB_Customer_HK as string,",
						"          HUB_Product_HK as string,",
						"          ProductAlternateKey as string,",
						"          CustomerAlternateKey as string,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LinkInternetSales",
						"source(output(",
						"          LINK_InternetSales_HK as string,",
						"          SAT_InternetSales_HDIFF as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SatInternetSales",
						"SourceInternetSales derive(LINK_InternetSales_HK = sha2(512, ProductAlternateKey,CustomerAlternateKey,SalesOrderNumber,SalesOrderLineNumber),",
						"          HUB_Customer_HK = sha2(512, CustomerAlternateKey),",
						"          LOAD_TS = currentTimestamp(),",
						"          HUB_Product_HK = sha2(512, ProductAlternateKey),",
						"          SAT_InternetSales_HDIFF = sha2(512, ProductAlternateKey,CustomerAlternateKey,SalesOrderNumber,SalesOrderLineNumber,RevisionNumber,OrderQuantity,UnitPrice,ExtendedAmount,UnitPriceDiscountPct,DiscountAmount,ProductStandardCost,TotalProductCost,SalesAmount,TaxAmt,Freight,CarrierTrackingNumber,CustomerPONumber,OrderDate,DueDate)) ~> HashColumns",
						"HashColumns, LinkInternetSales exists(HashColumns@LINK_InternetSales_HK == LinkInternetSales@LINK_InternetSales_HK,",
						"     negate:true,",
						"     broadcast: 'both')~> CheckNewLinkInternetSales",
						"CheckNewLinkInternetSales select(mapColumn(",
						"          ProductAlternateKey,",
						"          CustomerAlternateKey,",
						"          SalesOrderNumber,",
						"          SalesOrderLineNumber,",
						"          LINK_InternetSales_HK,",
						"          HUB_Customer_HK,",
						"          LOAD_TS,",
						"          HUB_Product_HK",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NewLinkInternetSales",
						"HashColumns, SatInternetSales exists(HashColumns@LINK_InternetSales_HK == SatInternetSales@LINK_InternetSales_HK",
						"     && HashColumns@SAT_InternetSales_HDIFF == SatInternetSales@SAT_InternetSales_HDIFF,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckNewSatInternetSales",
						"CheckNewSatInternetSales select(mapColumn(",
						"          RevisionNumber,",
						"          OrderQuantity,",
						"          UnitPrice,",
						"          ExtendedAmount,",
						"          UnitPriceDiscountPct,",
						"          DiscountAmount,",
						"          ProductStandardCost,",
						"          TotalProductCost,",
						"          SalesAmount,",
						"          TaxAmt,",
						"          Freight,",
						"          CarrierTrackingNumber,",
						"          CustomerPONumber,",
						"          OrderDate,",
						"          DueDate,",
						"          ShipDate,",
						"          LINK_InternetSales_HK,",
						"          LOAD_TS,",
						"          SAT_InternetSales_HDIFF",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NewSatProduct",
						"NewLinkInternetSales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LINK_InternetSales_HK as string,",
						"          HUB_Customer_HK as string,",
						"          HUB_Product_HK as string,",
						"          ProductAlternateKey as string,",
						"          CustomerAlternateKey as string,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as integer,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkLinkInternetSales",
						"NewSatProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LINK_InternetSales_HK as string,",
						"          RevisionNumber as integer,",
						"          OrderQuantity as integer,",
						"          UnitPrice as decimal(19,4),",
						"          ExtendedAmount as decimal(19,4),",
						"          UnitPriceDiscountPct as double,",
						"          DiscountAmount as double,",
						"          ProductStandardCost as decimal(19,4),",
						"          TotalProductCost as decimal(19,4),",
						"          SalesAmount as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          SAT_InternetSales_HDIFF as string,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkSatInternetSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_internetsales_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_LINK_InternetSales')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_InternetSales_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_InternetSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataVault_Product')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_product_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceProduct"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Product",
								"type": "DatasetReference"
							},
							"name": "HubProduct"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Product_Latest",
								"type": "DatasetReference"
							},
							"name": "SatProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Product",
								"type": "DatasetReference"
							},
							"name": "SinkHubProduct"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Product",
								"type": "DatasetReference"
							},
							"name": "SinkSatProduct"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewProduct"
						},
						{
							"name": "NewHubProduct"
						},
						{
							"name": "CheckNewSatProduct"
						},
						{
							"name": "NewSatProduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductAlternateKey as string,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          StandardCost as double,",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as short,",
						"          ReorderPoint as short,",
						"          ListPrice as double,",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          ModelName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceProduct",
						"source(output(",
						"          HUB_Product_HK as string,",
						"          ProductAlternateKey as string,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HubProduct",
						"source(output(",
						"          HUB_Product_HK as string,",
						"          SAT_Product_HDIFF as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SatProduct",
						"SourceProduct derive(HUB_Product_HK = sha2(512, ProductAlternateKey),",
						"          SAT_Product_HDIFF = sha2(512, ProductAlternateKey\r",
						"      ,WeightUnitMeasureCode\r",
						"      ,SizeUnitMeasureCode\r",
						"      ,EnglishProductName\r",
						"      ,StandardCost\r",
						"      ,FinishedGoodsFlag\r",
						"      ,Color\r",
						"      ,SafetyStockLevel\r",
						"      ,ReorderPoint\r",
						"      ,ListPrice\r",
						"      ,Size\r",
						"      ,SizeRange\r",
						"      ,Weight\r",
						"      ,ModelName),",
						"          LOAD_TS = currentTimestamp()) ~> HashColumns",
						"HashColumns, HubProduct exists(HashColumns@HUB_Product_HK == HubProduct@HUB_Product_HK,",
						"     negate:true,",
						"     broadcast: 'both')~> CheckNewProduct",
						"CheckNewProduct select(mapColumn(",
						"          ProductAlternateKey,",
						"          HUB_Product_HK,",
						"          LOAD_TS",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NewHubProduct",
						"HashColumns, SatProduct exists(HashColumns@HUB_Product_HK == SatProduct@HUB_Product_HK",
						"     && HashColumns@SAT_Product_HDIFF == SatProduct@SAT_Product_HDIFF,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckNewSatProduct",
						"CheckNewSatProduct select(mapColumn(",
						"          WeightUnitMeasureCode,",
						"          SizeUnitMeasureCode,",
						"          EnglishProductName,",
						"          StandardCost,",
						"          FinishedGoodsFlag,",
						"          Color,",
						"          SafetyStockLevel,",
						"          ReorderPoint,",
						"          ListPrice,",
						"          Size,",
						"          SizeRange,",
						"          Weight,",
						"          ModelName,",
						"          HUB_Product_HK,",
						"          SAT_Product_HDIFF,",
						"          LOAD_TS",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NewSatProduct",
						"NewHubProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          HUB_Product_HK as string,",
						"          ProductAlternateKey as string,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkHubProduct",
						"NewSatProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          HUB_Product_HK as string,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          ModelName as string,",
						"          SAT_Product_HDIFF as string,",
						"          LOAD_TS as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkSatProduct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_product_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Product')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Product_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Product')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYC_Taxi_Distance_Trip_wdf')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "TripData",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripData",
							"dataset": {
								"referenceName": "TripData",
								"type": "DatasetReference"
							}
						},
						{
							"name": "AdventureWorks",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AdventureWorks",
							"dataset": {
								"referenceName": "AdventureWorks",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared TripData = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://ncdatalake.dfs.core.windows.net/ncdatalake/trip_data_1.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared AdventureWorks = let\r\n  AdfDoc = Sql.Database(\"ncsqldbserver.database.windows.net\", \"ncsqldb\", [CreateNavigationProperties = false]),\r\n  InputTable = AdfDoc{[Schema = \"dbo\", Item = \"Employee\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = TripData,\r\n  ChangedType = Table.TransformColumnTypes(Source, {{\"trip_distance\", type number}, {\"pickup_longitude\", type number}, {\"pickup_latitude\", type number}, {\"dropoff_longitude\", type number}, {\"dropoff_latitude\", type number}}),\r\n  Lat1_Rad = Table.AddColumn(ChangedType, \"Lat1_Rad\", each ([pickup_latitude] / 180) * Number.PI),\r\n  Lon1_Rad = Table.AddColumn(Lat1_Rad, \"Lon1_Rad\", each ([pickup_longitude] / 180) * Number.PI),\r\n  Lat2_Rad = Table.AddColumn(Lon1_Rad, \"Lat2_Rad\", each ([dropoff_latitude] / 180)    * Number.PI),\r\n  Lon2_Rad = Table.AddColumn(Lat2_Rad, \"Lon2_Rad\", each ([dropoff_longitude] / 180) * Number.PI),\r\n  Distance_Mi = Table.AddColumn(Lon2_Rad, \"Distance_Mi\", each Number.Acos(Number.Sin([Lat1_Rad]) * Number.Sin([Lat2_Rad]) + Number.Cos([Lat1_Rad]) * Number.Cos([Lat2_Rad]) * Number.Cos([Lon2_Rad]-[Lon1_Rad])) * 3959),\r\n  RemovedColumns = Table.RemoveColumns(Distance_Mi, {\"Lat1_Rad\", \"Lon1_Rad\", \"Lat2_Rad\", \"Lon2_Rad\"})\r\nin\r\n  RemovedColumns;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TripData')]",
				"[concat(variables('workspaceId'), '/datasets/AdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TaxiDemo')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "TripData",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripData",
							"dataset": {
								"referenceName": "TripData",
								"type": "DatasetReference"
							}
						},
						{
							"name": "TripFares",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripFares",
							"dataset": {
								"referenceName": "TripFares",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1; shared #\"TripData\" = let AdfDoc = Web.Contents(\"https://bdataadlsgen2.dfs.core.windows.net/nyctaxidata-staging/trip_data/trip_data_1.csv?sv=2018-03-28&sig=GqfnzpNsitPfmZH8AwnhXmymQUcC4VSLFZAg9z%2BFJuA%3D&spr=https&se=2019-11-08T19%3A15%3A35Z&srt=sco&ss=bf&sp=rwl\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]), TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName)) in TrimmedHeaders;shared #\"TripFares\" = let AdfDoc = Web.Contents(\"https://bdataadlsgen2.dfs.core.windows.net/nyctaxidata-staging/trip_fare/trip_fare_1.csv?sv=2018-03-28&sig=1p0MCkz9EoTNb5RmDfw1HL%2F2Sl2QKvOllBw0kbSgbGs%3D&spr=https&se=2019-11-08T19%3A15%3A37Z&srt=sco&ss=bf&sp=rwl\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]), TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName)) in TrimmedHeaders;\r\nshared UserQuery = let\r\n  Source = TripData,\r\n  #\"Inner Join\" = Table.NestedJoin(Source, {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\"}, TripFares, {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\"}, \"TripFares\", JoinKind.Inner),\r\n  #\"Expanding Joined Tables\" = Table.ExpandTableColumn(#\"Inner Join\", \"TripFares\", {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\", \"payment_type\", \"fare_amount\", \"surcharge\", \"mta_tax\", \"tip_amount\", \"tolls_amount\", \"total_amount\"}, {\"TripFares.medallion\", \"TripFares.hack_license\", \"TripFares.vendor_id\", \"TripFares.pickup_datetime\", \"TripFares.payment_type\", \"TripFares.fare_amount\", \"TripFares.surcharge\", \"TripFares.mta_tax\", \"TripFares.tip_amount\", \"TripFares.tolls_amount\", \"TripFares.total_amount\"}),\r\n  #\"Converting to Decimal Types\" = Table.TransformColumnTypes(#\"Expanding Joined Tables\", {{\"TripFares.total_amount\", type number}, {\"passenger_count\", type number}, {\"trip_time_in_secs\", type number}, {\"trip_distance\", type number}}),\r\n  #\"Grouped rows\" = Table.Group(#\"Converting to Decimal Types\", {\"vendor_id\"}, {{\"total_passenger_count\", each List.Sum([passenger_count]), type number}, {\"total_trip_time_in_secs\", each List.Sum([trip_time_in_secs]), type number}, {\"total_trip_distance\", each List.Sum([trip_distance]), type number}, {\"total_trip_fare\", each List.Sum([TripFares.total_amount]), type number}})\r\nin\r\n  #\"Grouped rows\";"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TripData')]",
				"[concat(variables('workspaceId'), '/datasets/TripFares')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AdventureWorks",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AdventureWorks",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tWeight as decimal(8,2),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\tThumbNailPhoto as binary,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 select(mapColumn(\n\t\tProductID,\n\t\tName,\n\t\tProductNumber,\n\t\tColor,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tSize,\n\t\tWeight,\n\t\tProductCategoryID,\n\t\tProductModelID,\n\t\tSellStartDate,\n\t\tSellEndDate,\n\t\tDiscontinuedDate,\n\t\tThumbNailPhoto,\n\t\tThumbnailPhotoFileName,\n\t\trowguid,\n\t\tModifiedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tEmpID as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as string,\n\t\tEndDate as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow_SQL_SAT_ROC')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SourceHubGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SourceSatGeography"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkHubGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "sinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "SelectNewGeography"
						},
						{
							"name": "CheckNewSatgeogrphy"
						},
						{
							"name": "SelectNewSatGeography"
						}
					],
					"script": "source(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceHubGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSatGeography\nSourceGeography derive(HUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tSAT_Geography_HDIFF = sha2(512, GeographyAlternateKey,City,StateProvinceCode,StateProvinceName,CountryRegionCode,EnglishCountryRegionName,PostalCode)) ~> HashColumns\nHashColumns, SourceHubGeography exists(HashColumns@HUB_Geography_HK == SourceHubGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewGeography\nHashColumns, SourceSatGeography exists(HashColumns@HUB_Geography_HK == SourceSatGeography@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SourceSatGeography@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewSatgeogrphy\nCheckNewSatgeogrphy select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS,\n\t\tSAT_Geography_HDIFF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewSatGeography\nSelectNewGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS\n\t)) ~> SinkHubGeography\nSelectNewSatGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tSAT_Geography_HDIFF,\n\t\tLOAD_TS\n\t)) ~> sinkSatGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_geography_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Geography')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow_SQL_SAT_df')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "HUBGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SourceLastSatGeography"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "NewGeography"
						},
						{
							"name": "CheckNewSatGeography"
						},
						{
							"name": "NewSatGeography"
						}
					],
					"script": "source(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HUBGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceLastSatGeography\nSourceGeography derive(HUB_Geography_HK = sha2(512, GeographyAlternateKey),\n\t\tLOAD_TS = currentTimestamp(),\n\t\tSAT_Geography_HDIFF = sha2(512, GeographyAlternateKey,City,StateProvinceCode,StateProvinceName,CountryRegionCode,EnglishCountryRegionName,PostalCode)) ~> HashColumns\nHashColumns, HUBGeography exists(HashColumns@HUB_Geography_HK == HUBGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewGeography\nHashColumns, SourceLastSatGeography exists(HashColumns@HUB_Geography_HK == SourceLastSatGeography@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SourceLastSatGeography@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewSatGeography\nCheckNewSatGeography select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS,\n\t\tSAT_Geography_HDIFF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewSatGeography\nNewGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS\n\t)) ~> SinkGeography\nNewSatGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSatGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_geography_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Geography')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_PASS_ADF_DataVault')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLOB_dvs_geography_incr_ds",
								"type": "DatasetReference"
							},
							"name": "SourceGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SourceHUBGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography_Latest",
								"type": "DatasetReference"
							},
							"name": "SourcSatGeographyLatest"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASQL_DV_HUB_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkHUbGeography"
						},
						{
							"dataset": {
								"referenceName": "ASQL_DV_SAT_Geography",
								"type": "DatasetReference"
							},
							"name": "SinkSatGeography"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "CheckNewGeography"
						},
						{
							"name": "SelectHubGeography"
						},
						{
							"name": "CheckNewSatGeography"
						},
						{
							"name": "SelectNewSatGeography"
						}
					],
					"script": "source(output(\n\t\tGeographyAlternateKey as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceHUBGeography\nsource(output(\n\t\tHUB_Geography_HK as string,\n\t\tSAT_Geography_HDIFF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourcSatGeographyLatest\nSourceGeography derive(HUB_Geography_HK = sha2(256, GeographyAlternateKey),\n\t\tSAT_Geography_HDIFF = sha2(256, GeographyAlternateKey,City,StateProvinceCode,StateProvinceName,CountryRegionCode,EnglishCountryRegionName,PostalCode),\n\t\tLOAD_TS = currentTimestamp()) ~> HashColumns\nHashColumns, SourceHUBGeography exists(HashColumns@HUB_Geography_HK == SourceHUBGeography@HUB_Geography_HK,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewGeography\nCheckNewGeography select(mapColumn(\n\t\tGeographyAlternateKey,\n\t\tHUB_Geography_HK,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectHubGeography\nHashColumns, SourcSatGeographyLatest exists(HashColumns@HUB_Geography_HK == SourcSatGeographyLatest@HUB_Geography_HK\n\t&& HashColumns@SAT_Geography_HDIFF == SourcSatGeographyLatest@SAT_Geography_HDIFF,\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckNewSatGeography\nCheckNewSatGeography select(mapColumn(\n\t\tCity,\n\t\tStateProvinceCode,\n\t\tStateProvinceName,\n\t\tCountryRegionCode,\n\t\tEnglishCountryRegionName,\n\t\tPostalCode,\n\t\tHUB_Geography_HK,\n\t\tSAT_Geography_HDIFF,\n\t\tLOAD_TS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewSatGeography\nSelectHubGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tGeographyAlternateKey as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tHUB_Geography_HK,\n\t\tGeographyAlternateKey,\n\t\tLOAD_TS\n\t)) ~> SinkHUbGeography\nSelectNewSatGeography sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tHUB_Geography_HK as string,\n\t\tCity as string,\n\t\tStateProvinceCode as string,\n\t\tStateProvinceName as string,\n\t\tCountryRegionCode as string,\n\t\tEnglishCountryRegionName as string,\n\t\tPostalCode as string,\n\t\tSAT_Geography_HDIFF as string,\n\t\tLOAD_TS as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkSatGeography"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BLOB_dvs_geography_incr_ds')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_HUB_Geography')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography_Latest')]",
				"[concat(variables('workspaceId'), '/datasets/ASQL_DV_SAT_Geography')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_flatten_task_cakes_JSON')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_json_dataflow_sample",
								"type": "DatasetReference"
							},
							"name": "SourceJSONCakes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dataflow_output",
								"type": "DatasetReference"
							},
							"name": "SinkFlattenOutput"
						}
					],
					"transformations": [
						{
							"name": "FlattenTopping"
						},
						{
							"name": "FlattenBatter"
						}
					],
					"script": "source(output(\n\t\tbatters as (batter as (id as string, type as string)[]),\n\t\tid as string,\n\t\tname as string,\n\t\tppu as string,\n\t\ttopping as (id as string, type as string)[],\n\t\ttype as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tlimit: 100,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments',\n\twildcardPaths:['ManyJSON_Objects.json']) ~> SourceJSONCakes\nSourceJSONCakes foldDown(unroll(topping),\n\tmapColumn(\n\t\tid,\n\t\tcake_type = type,\n\t\tcake_name = name,\n\t\tppu,\n\t\ttopping_id = topping.id,\n\t\ttopping_type = topping.type,\n\t\tbatters\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenTopping\nFlattenTopping foldDown(unroll(batters.batter, batters.batter),\n\tmapColumn(\n\t\tid,\n\t\tcake_type,\n\t\tcake_name,\n\t\tppu,\n\t\ttopping_id,\n\t\ttopping_type,\n\t\tbatter_id = batters.batter.id,\n\t\tbatter_type = batters.batter.type\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenBatter\nFlattenBatter sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string\n\t),\n\tpartitionFileNames:['flatten_output.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> SinkFlattenOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_json_dataflow_sample')]",
				"[concat(variables('workspaceId'), '/datasets/ds_dataflow_output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_stacking_datasets')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_df_temperature_data",
								"type": "DatasetReference"
							},
							"name": "SourceTemperature"
						},
						{
							"dataset": {
								"referenceName": "ds_df_temperature_header",
								"type": "DatasetReference"
							},
							"name": "SourceHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_df_temperature_output",
								"type": "DatasetReference"
							},
							"name": "SingOutputDataset"
						}
					],
					"transformations": [
						{
							"name": "FilterCanadaData"
						},
						{
							"name": "CombineDatasets"
						},
						{
							"name": "DataSortColumn"
						},
						{
							"name": "SortOutput"
						}
					],
					"script": "source(output(\n\t\tdt as string,\n\t\tAverageTemperature as string,\n\t\tAverageTemperatureUncertainty as string,\n\t\tCity as string,\n\t\tCountry as string,\n\t\tLatitude as string,\n\t\tLongitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceTemperature\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceHeader\nSourceTemperature filter(Country == 'Canada') ~> FilterCanadaData\nSourceHeader, DataSortColumn union(byName: false)~> CombineDatasets\nFilterCanadaData derive(row_id = 2) ~> DataSortColumn\nCombineDatasets sort(asc(Column_8, true)) ~> SortOutput\nSortOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string\n\t),\n\tpartitionFileNames:['GlobalLandTemperaturesByMajorCity-Canada.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tColumn_1,\n\t\tColumn_2,\n\t\tColumn_3,\n\t\tColumn_4,\n\t\tColumn_5,\n\t\tColumn_6,\n\t\tColumn_7\n\t),\n\tpartitionBy('hash', 1)) ~> SingOutputDataset"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_df_temperature_data')]",
				"[concat(variables('workspaceId'), '/datasets/ds_df_temperature_header')]",
				"[concat(variables('workspaceId'), '/datasets/ds_df_temperature_output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scdT1Generic')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a generalized Slowly Changing Dimension Type 1 that is parameterized to work against different dimension tables and dimension types.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BlobInputFolder2",
								"type": "DatasetReference"
							},
							"name": "NewMembers1"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable2",
								"type": "DatasetReference"
							},
							"name": "ExistingMembers"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable2",
								"type": "DatasetReference"
							},
							"name": "SetMaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParameterTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "PickCols1"
						},
						{
							"name": "PickCols2"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "checkMatch"
						},
						{
							"name": "UpdateSetAttrs"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "isMatching"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "InsertSetAttrs"
						},
						{
							"name": "Join1"
						},
						{
							"name": "SetCols"
						}
					],
					"script": "parameters{\n\tdimname as string ('dimprods'),\n\tkeycol as string ('ProductNumber'),\n\tSurrogateKey as string ('ProductID'),\n\ttablename as string ('DimProducts')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> NewMembers1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingMembers\nsource(output(\n\t\tmaxsk as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (concat('select max(',$SurrogateKey,') as maxsk from ',$tablename)),\n\tformat: 'query') ~> SetMaxKey\nNewMembers1 derive(businesskey1 = toString(byPosition(2)),\n\t\tname1 = toString(byPosition(6))) ~> PickCols1\nExistingMembers derive(each(match(instr(name,'ID')>0), 'surrogatekey2' = toInteger($$)),\n\t\teach(match(instr(name,'Number')>0), 'businesskey2' = toString($$))) ~> PickCols2\nPickCols1, MapDrifted1 lookup(businesskey1 == businesskey2,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nisMatching split(match,\n\tdisjoint: false) ~> checkMatch@(isMatch, noMatch)\ncheckMatch@isMatch derive({_LastUpdated} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> UpdateSetAttrs\nPickCols2 derive(ProductID = toInteger(byName('ProductID')),\n\t\tName = toString(byName('Name')),\n\t\tProductNumber = toString(byName('ProductNumber')),\n\t\tColor = toString(byName('Color')),\n\t\tStandardCost = toDecimal(byName('StandardCost')),\n\t\tListPrice = toDecimal(byName('ListPrice')),\n\t\t{_Inserted} = toTimestamp(byName('_Inserted')),\n\t\t{_LastUpdated} = toTimestamp(byName('_LastUpdated')),\n\t\tDWhash = toString(byName('DWhash')),\n\t\tsurrogatekey2 = toInteger(byName('surrogatekey2')),\n\t\tbusinesskey2 = toString(byName('businesskey2'))) ~> MapDrifted1\nLookup1 derive(match = isMatch()) ~> isMatching\nUpdateSetAttrs alterRow(updateIf(true())) ~> AlterRow1\ncheckMatch@noMatch keyGenerate(output(surrogatekey2 as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey1\nJoin1 derive(surrogatekey2 = surrogatekey2 + maxsk,\n\t\t{_LastUpdated} = currentTimestamp(),\n\t\t{_Inserted} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> InsertSetAttrs\nSurrogateKey1, SetMaxKey join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nInsertSetAttrs select(mapColumn(\n\t\tName = name1,\n\t\t{_Inserted},\n\t\t{_LastUpdated},\n\t\teach(match(name=='surrogatekey2'),\n\t\t\t$SurrogateKey+'' = $$),\n\t\teach(match(name=='businesskey1'),\n\t\t\t$keycol+'' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SetCols\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($keycol)],\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\teach(patternMatch(`.*[^_]$`))\n\t),\n\tpartitionBy('hash', 1)) ~> sink1\nSetCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BlobInputFolder2')]",
				"[concat(variables('workspaceId'), '/datasets/ParameterTable2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wdf_expand_json_column')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_json_temp",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~>  ds_json_temp",
							"dataset": {
								"referenceName": "ds_json_temp",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_json_temp = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://azuesu2edusa.dfs.core.windows.net/jsondata/Test_JSON.txt\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \"|\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = ds_json_temp,\r\n  #\"Parsed JSON\" = Table.TransformColumns(Source, {{\"Detail\", each Json.Document(_), type any}}),\r\n  #\"Expanded Detail\" = Table.ExpandRecordColumn(#\"Parsed JSON\", \"Detail\", {\"id\", \"type\", \"name\"}, {\"Detail.id\", \"Detail.type\", \"Detail.name\"})\r\nin\r\n  #\"Expanded Detail\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_json_temp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wdf_json_file')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_dataflow_sample",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~>  ds_dataflow_sample",
							"dataset": {
								"referenceName": "ds_dataflow_sample",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_dataflow_sample = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://bdatablob.blob.core.windows.net/dataflows/ManyJSON_Objects - CSV.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \"|\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv])\r\nin\r\n  Csv;\r\nshared UserQuery = let\r\n  Source = ds_dataflow_sample,\r\n  #\"Renamed columns\" = Table.RenameColumns(Source, {{\"Column1\", \"column\"}}),\r\n  #\"Parse JSON\" = Table.TransformColumns(#\"Renamed columns\",{},Json.Document),\r\n  #\"Expand JSON\" = Table.ExpandRecordColumn(#\"Parse JSON\", \"column\", {\"id\", \"type\", \"name\", \"ppu\", \"batters\", \"topping\"}, {\"id\", \"type\", \"name\", \"ppu\", \"batters\", \"topping\"}),\r\n  #\"Unroll topping\" = Table.ExpandListColumn(#\"Expand JSON\", \"topping\"),\r\n  #\"Expand topping\" = Table.ExpandRecordColumn(#\"Unroll topping\", \"topping\", {\"id\", \"type\"}, {\"topping.id\", \"topping.type\"}),\r\n  #\"Expand batters\" = Table.ExpandRecordColumn(#\"Expand topping\", \"batters\", {\"batter\"}, {\"batter\"}),\r\n  #\"Unroll batter\" = Table.ExpandListColumn(#\"Expand batters\", \"batter\"),\r\n  #\"Expand batter\" = Table.ExpandRecordColumn(#\"Unroll batter\", \"batter\", {\"id\", \"type\"}, {\"batter.id\", \"batter.type\"})\r\nin\r\n  #\"Expand batter\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_dataflow_sample')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ncsynapsesqlpool100c')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "germanywestcentral"
		}
	]
}